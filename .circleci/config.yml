version: 2.1

jobs:
  ###########################################################################
  # Ordinary "build and test" CI flow
  build-and-test-extension:
    docker:
      - image: circleci/node:latest-browsers

    parameters:
      # Manually change/increase the following parameter to ensure that builds start without the Circle CI cache being populated
      # Useful eg to ensure that the latest Firefox Nightly is installed
      cache_buster:
        type: string
        default: '1'

    working_directory: ~/checkout

    steps:
      - checkout

      - run:
          name: Print out parameters used for this Circle CI job
          command: |
            echo 'cache_buster: << parameters.cache_buster >>'

      - run:
          name: Generate a file to use for the cache key that changes when dependencies change
          command: |
            cat yarn.lock > dependencies.txt
            cat download-bergamot-translator-wasm-artifacts.sh >> dependencies.txt
            cat test/e2e/requirements.txt >> dependencies.txt
            cat .circleci/install-mitmproxy.sh >> dependencies.txt

      - restore_cache:
          keys:
            - dependencies-and-browsers-{{ checksum "dependencies.txt" }}-<< parameters.cache_buster >>

      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile

      - run:
          name: Download and import Bergamot Translator build artifacts
          command: yarn bergamot-translator:download-and-import

      - run:
          name: Check if the imported Bergamot Translator's glue code matches the versioned code contents
          command: |
            if git diff --quiet src/core/ts/web-worker-scripts/translation-worker.js/bergamot-translator-worker.ts
            then
              echo "The imported Bergamot Translator's glue code matches the versioned code contents"
            else
              echo "The imported Bergamot Translator's glue code does not match the versioned code contents. This means that the code that was reviewed differs from the code that ends up in the extension builds. Current changes:"
              git diff --exit-code src/core/ts/web-worker-scripts/translation-worker.js/bergamot-translator-worker.ts || true
            fi

      - run:
          name:  Install Firefox
          command: |
            yarn ci:install-firefox:linux

      - run:
          name:  Install Mitmproxy (required to verify telemetry in e2e tests)
          command: |
            .circleci/install-mitmproxy.sh

      - save_cache:
          paths:
            - node_modules
            - firefox-nightly-linux
            - test/e2e/venv
          key: dependencies-and-browsers-{{ checksum "dependencies.txt" }}-<< parameters.cache_buster >>

      - run:
          name: Print which version of Firefox is installed
          command: |
            echo "Version of Firefox installed:"
            ./firefox-nightly-linux/firefox-bin -v
            cat firefox-nightly-linux/platform.ini

      - run:
          name: Lint
          command: yarn lint

      - run:
          name: Build extension - Firefox Infobar UI
          command: yarn build:firefox-infobar-ui

      - run:
          name: Build extension - Firefox Cross-browser UI
          command: yarn build:cross-browser-ui:firefox

      - run:
          name: Build extension - Chrome Cross-browser UI
          command: yarn build:cross-browser-ui:chrome

      - store_artifacts:
          path: "dist"
          destination: "dist"

      - run:
          name: Add-ons Linter
          command: yarn addons-linter

      - run:
          name: Run tests
          command: FIREFOX_BINARY=./firefox-nightly-linux/firefox-bin yarn e2e-tests

      - store_artifacts:
          path: "test/e2e/results"
          destination: "test/e2e/results"

  ###########################################################################
  # Docs
  generate-docs:
    docker:
      - image: circleci/node:latest-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "docs/package.json" }}
      - run:
          name: Install npm deps
          command: cd docs && yarn install --immutable
      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ checksum "docs/package.json" }}
      - run:
          name: Upgrade packages
          command: sudo apt update
      - run:
          name: Install Aspell and Rust
          command: sudo apt install aspell aspell-en rustc
      - run:
          name: Version information
          command: rustc --version; cargo --version; aspell --version; yarn --version
      - run:
          name: Install mdbook-dtmo
          command: |
            MDBOOK_VERSION=0.8.1
            MDBOOK="mdbook-dtmo-${MDBOOK_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
            MDBOOK_SHA256=5b8fc7444816c685ae6a3018e6168844a2fcde73e681a9bfbe4775f361dec64c
            curl -sfSL --retry 5 -O "https://github.com/badboy/mdbook-dtmo/releases/download/${MDBOOK_VERSION}/${MDBOOK}"
            echo "${MDBOOK_SHA256} *${MDBOOK}" | shasum -a 256 -c -
            tar -xvf "${MDBOOK}"
            # We rename it to mdbook here, so other tools keep working as expected
            mkdir -p ~/.local/bin/
            mv mdbook-dtmo ~/.local/bin/mdbook
            mdbook --version
      - run:
          name: Generate API docs
          command: cd docs && yarn generate-api-docs
      - run:
          name: Build documentation
          command: cd docs && yarn build
      - run:
          name: Check documentation links
          command: cd docs && yarn linkcheck
      - persist_to_workspace:
          root: build/
          paths:
            - docs/user
            - docs/dev
            - docs/shared
            - docs/index.html

  docs-spellcheck:
    docker:
      # This is a separate job so that we can use Ubuntu Focal (20.04) and that
      # way get aspell 0.60.8 or later (which contains markdown support)
      - image: circleci/buildpack-deps:focal
    steps:
      - checkout
      - run:
          name: Upgrade packages
          command: sudo apt update
      - run:
          name: Install aspell
          command: sudo apt install aspell aspell-en
      - run:
          name: Check documentation spelling
          command: cd docs && bin/spellcheck.sh list

  # via https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: build/
      - run:
          name: Disable jekyll builds
          command: touch build/docs/.nojekyll
      - run:
          name: Show contents
          command: ls -R
      # Needed for write access to the GitHub repository;
      # see https://circleci.com/docs/2.0/gh-bb-integration/#deployment-keys-and-user-keys
      - add_ssh_keys:
          fingerprints:
            - "15:15:41:db:aa:14:12:c6:a5:53:e1:06:e9:e6:a1:57"
      # The gh-pages npm package can be used to push a directory to a git branch;
      # see https://www.npmjs.com/package/gh-pages
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            git config user.email "ci-docs-deploy@firefox-translations"
            git config user.name "CircleCI docs-deploy job"
            npm install -g --silent gh-pages@2.0.1
            gh-pages --dotfiles --message "[skip ci] Updates" --dist build/docs


###########################################################################
# Workflows

workflows:
  version: 2
  ci:
    jobs:
      - build-and-test-extension
      - generate-docs
      - docs-spellcheck:
          requires:
            - generate-docs
      - docs-deploy:
          requires:
            - docs-spellcheck
          filters:
            branches:
              only: main
