/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// AUTOGENERATED BY glean_parser. DO NOT EDIT. DO NOT COMMIT.

import StringMetricType from "@mozilla/glean/webext/private/metrics/string";
import TimespanMetricType from "@mozilla/glean/webext/private/metrics/timespan";
import QuantityMetricType from "@mozilla/glean/webext/private/metrics/quantity";
/**
 * Timing from "translation button pressed"
 * to "full page is translated".
 *
 * Generated from `performance.full_page_translated_time`.
 */
export const fullPageTranslatedTime = new TimespanMetricType(
  {
    category: "performance",
    name: "full_page_translated_time",
    sendInPings: ["custom"],
    lifetime: "ping",
    disabled: false,
  },
  "millisecond",
);

/**
 * Speed of the translation from "translation button
 * pressed" to "full page is translated".
 *
 * Generated from `performance.full_page_translated_wps`.
 */
export const fullPageTranslatedWps = new QuantityMetricType({
  category: "performance",
  name: "full_page_translated_wps",
  sendInPings: ["custom"],
  lifetime: "ping",
  disabled: false,
});

/**
 * Time spent on downloading a translation model for a language pair.
 * (Renamed from model_download_time to model_download_time_num as part of
 * changing type from string to quantity)
 *
 * Generated from `performance.model_download_time_num`.
 */
export const modelDownloadTimeNum = new TimespanMetricType(
  {
    category: "performance",
    name: "model_download_time_num",
    sendInPings: ["custom"],
    lifetime: "ping",
    disabled: false,
  },
  "millisecond",
);

/**
 * Time spent on loading a model into memory to start translation.
 * (Renamed from model_load_time to model_load_time_num as part of
 * changing type from string to quantity)
 *
 * Generated from `performance.model_load_time_num`.
 */
export const modelLoadTimeNum = new TimespanMetricType(
  {
    category: "performance",
    name: "model_load_time_num",
    sendInPings: ["custom"],
    lifetime: "ping",
    disabled: false,
  },
  "millisecond",
);

/**
 * Time spent on translation by the translation engine.
 *
 * Generated from `performance.translation_engine_time`.
 */
export const translationEngineTime = new TimespanMetricType(
  {
    category: "performance",
    name: "translation_engine_time",
    sendInPings: ["custom"],
    lifetime: "ping",
    disabled: false,
  },
  "millisecond",
);

/**
 * Speed of translation as measured by the translation engine.
 *
 * Generated from `performance.translation_engine_wps`.
 */
export const translationEngineWps = new QuantityMetricType({
  category: "performance",
  name: "translation_engine_wps",
  sendInPings: ["custom"],
  lifetime: "ping",
  disabled: false,
});

/**
 * Total number of words on the original web page.
 *
 * Generated from `performance.word_count`.
 */
export const wordCount = new QuantityMetricType({
  category: "performance",
  name: "word_count",
  sendInPings: ["custom"],
  lifetime: "ping",
  disabled: false,
});

/**
 * Total number of visible words on the original web page that
 * were visible in the viewport at the time of "translation button pressed".
 *
 * Generated from `performance.word_count_visible_in_viewport`.
 */
export const wordCountVisibleInViewport = new QuantityMetricType({
  category: "performance",
  name: "word_count_visible_in_viewport",
  sendInPings: ["custom"],
  lifetime: "ping",
  disabled: false,
});

/**
 * Quality estimation of translation.
 *
 * Generated from `performance.translation_quality`.
 */
export const translationQuality = new StringMetricType({
  category: "performance",
  name: "translation_quality",
  sendInPings: ["custom"],
  lifetime: "ping",
  disabled: false,
});
